local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "All damge script",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "All damge script",
   LoadingSubtitle = "by Nickjtoh",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key System",
      Subtitle = "Key System",
      Note = "Idk only chosen can access", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Nickjtoh"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})



local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image'

local Toggle = Tab:CreateToggle({
   Name = "Inf Artificial hood stack",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
                local args = {
                [1] = "Input",
                [2] = "ArtiphaseArtificer's Hood",
                [3] = 6,
                [4] = "Phase"
            }

game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Inf Stunner",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
               local args = {
                [1] = "Input",
                [2] = "Reality KnifeReality Dagger",
                [3] = 8,
                [4] = "Stunner"
            }

game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Inf Slash",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
             local args = {
                [1] = "Input",
                [2] = "Reality KnifeReality Dagger",
                [3] = 8,
                [4] = "Reality"
            }

game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Insane artificial hood stack",
   Callback = function()
    for i = 1, 30 do
            local args = {
                [1] = "Input",
                [2] = "ArtiphaseArtificer's Hood",
                [3] = 6,
                [4] = "Phase"
            }
            game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
        end
   end,
})

local Button = Tab:CreateButton({
   Name = "Insane Stunner x2 damge",
   Callback = function()
    for i = 1, 60 do
            local args = {
                [1] = "Input",
                [2] = "Reality KnifeReality Dagger",
                [3] = 8,
                [4] = "Stunner"
            }
            game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
        end
   end,
})

local Button = Tab:CreateButton({
   Name = "God Slash",
   Callback = function()
    for i = 1, 70 do
            local args = {
                [1] = "Input",
                [2] = "Reality KnifeReality Dagger",
                [3] = 8,
                [4] = "Reality"
            }
            game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
        end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Loadout Spam",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
local args = {
    [1] = "LoadoutChange",
    [2] = 1
}

game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Fed Chest Spam",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
    local args = {
        [1] = "ChangeEquipment",
        [2] = 622
    }
    
    game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
    wait() 
    local args = {
        [1] = "ChangeEquipment",
        [2] = 622,
        [3] = true
    }
    
    game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Dotf Damge stack",
 Action = function()
        for i = 1, 5 do
        local args = {
            [1] = "Input",
            [2] = "DukeDuke of the Federation",
            [3] = 20,
            [4] = "E"
        }
             game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
        end
   end,
})

local Button = Tab:CreateButton({
   Name = "Gunshot Memento",
   Interact = 'Click',
   Callback = function()
  -- Function to generate a directional vector based on avatar's facing direction with spread
local function getShotVector(offsetAngle)
    local character = game:GetService("Players").LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    if rootPart then
        local rotation = CFrame.Angles(0, math.rad(offsetAngle), 0) -- Yaw rotation for spread
        return (rootPart.CFrame * rotation).LookVector * math.random(8, 12) -- Apply rotation and scale
    else
        return Vector3.new(0, 0, 0) -- Default if rootPart is not found
    end
end

-- Fire shots in a 360-degree spread, repeated 3 times
for i = 1, 3 do -- Fire 3 times
    for angle = 0, 360, 20 do -- Spread shots every 36 degrees
        local args = {
            [1] = "Input",
            [2] = "MoriMemento Mori",
            [3] = 2,
            [4] = "LMB",
            [5] = getShotVector(angle) -- Get vector for each angle
        }

        game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
    end
    wait() -- Add a small delay between rounds
end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Memento Mori R",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(CurrentValue)
   if CurrentValue then
        _G.loop2 = true
while _G.loop2 do
                local args = {
                [1] = "Input",
                [2] = "MoriMemento Mori",
                [3] = 9,
                [4] = "R",
            }

game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
wait()
end
    else
        _G.loop2 = false
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Tornardo memento",
   Interact = 'Click',
   Callback = function()
  -- Function to generate a directional vector based on avatar's facing direction with spread
local function getShotVector(offsetAngle)
    local character = game:GetService("Players").LocalPlayer.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    if rootPart then
        local rotation = CFrame.Angles(0, math.rad(offsetAngle), 0) -- Yaw rotation for spread
        return (rootPart.CFrame * rotation).LookVector * math.random(8, 12) -- Apply rotation and scale
    else
        return Vector3.new(0, 0, 0) -- Default if rootPart is not found
    end
end

-- Fire shots in a 360-degree spread, repeated 3 times
for i = 1, 20 do -- Fire 3 times
    for angle = 0, 360, 20 do -- Spread shots every 36 degrees
        local args = {
            [1] = "Input",
            [2] = "MoriMemento Mori",
            [3] = 11.25,
            [4] = "F",
            [5] = getShotVector(angle) -- Get vector for each angle
        }

        game:GetService("Players").LocalPlayer.Character.Combat.RemoteEvent:FireServer(unpack(args))
    end
    wait() -- Add a small delay between rounds
end
   end,
})


